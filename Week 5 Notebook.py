# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cwA1ubZEdS-RUBioiCCTUcMpg7lst4tW
"""

import numpy as np # library to handle data in a vectorized manner

import pandas as pd # library for data analsysis
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

import json # library to handle JSON files

#!conda install -c conda-forge geopy --yes # uncomment this line if you haven't completed the Foursquare API lab
from geopy.geocoders import Nominatim # convert an address into latitude and longitude values

import requests # library to handle requests
from pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe

# Matplotlib and associated plotting modules
import matplotlib.cm as cm
import matplotlib.colors as colors

# import k-means from clustering stage
from sklearn.cluster import KMeans

#!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab
import folium # map rendering library

print('Libraries imported.')

request = requests.get('https://opendata.arcgis.com/datasets/af500b5abb7240399853b35a2362d0c0_0.geojson')
toronto_c = request.json()

toronto_c

tcrime = toronto_c["features"]
tcrime[0]

column_names = ['Neighborhood',"Population","Assault 2019","Assault Rate 2019",
                "AutoTheft 2019","AutoTheft Rate 2019","BreakandEnter 2019",
                "BreakandEnter Rate 2019","Robbery 2019","Robbery Rate 2019",
                "Area Size"
                ]
crime_df = pd.DataFrame(columns = column_names)     
crime_df.head()

for data in tcrime: 
    neighborhood = data['properties']['Neighbourhood']
    assault_rate = data['properties']['Assault_2019']
    assault = data['properties']['Assault_Rate_2019']
    auto_theft_rate = data['properties']['AutoTheft_Rate_2019']
    auto_theft = data['properties']['AutoTheft_2019']
    breakandenter = data['properties']['BreakandEnter_2019']
    breakandenter_rate = data['properties']['BreakandEnter_Rate_2019']
    robbery = data['properties']['Robbery_2019']
    robbery_rate = data['properties']['Robbery_Rate_2019']
    population = data['properties']['Population']
    area = data["properties"]['Shape__Area']
    crime_df = crime_df.append({
        'Neighborhood':neighborhood,
        "Population": population,
        "Assault 2019":assault,
        "Assault Rate 2019":assault_rate,
        "AutoTheft 2019":auto_theft,
        "AutoTheft Rate 2019": auto_theft_rate,
        "BreakandEnter 2019":breakandenter,
        "BreakandEnter Rate 2019":breakandenter_rate,
        "Robbery 2019":robbery,
        "Robbery Rate 2019":robbery_rate,
        "Area Size":area
    },ignore_index=True)


crime_df.head()

geo = pd.DataFrame(columns=["Longitude",'Latitude'])


for data in tcrime:
  lat = []
  lng = []
  for value in data["geometry"]['coordinates'][0]:
    lat.append(value[1])
    lng.append(value[0])
  latitude = np.array(lat).mean()
  longitude = np.array(lng).mean()
  geo = geo.append({"Longitude":longitude,
              "Latitude":latitude
  }, ignore_index = True)


geo.head()

crime_df = pd.concat([crime_df,geo],axis = 1)

crime_df.head()

address = 'Toronto ON'

geolocator = Nominatim(user_agent="ny_explorer")
location = geolocator.geocode(address)
on_latitude = location.latitude
on_longitude = location.longitude
print('The geograpical coordinate of Toronto are {}, {}.'.format(on_latitude, on_longitude))

import math
map_toronto = folium.Map(location = [latitude, longitude], zoom_start =11)
for lng,lat,neighborhood,population in zip(crime_df['Longitude'],
                                           crime_df['Latitude'],
                                           crime_df['Neighborhood'],
                                           crime_df['Population']
                                           ):
  label = '{}'.format(neighborhood)
  label = folium.Popup(label, parse_html= True)
  folium.CircleMarker(
      [lat,lng],
      radius = np.sqrt(population/1000),
      color = 'blue',
      fill = True,
      fill_color = "blue",
      fill_opacity = 0.7,
      parse_html = False
  ).add_to(map_toronto)

text = 'Forest Hill South'

iframe = folium.IFrame(text, width=20, height=15)

map_toronto

crime_df["Density"] = crime_df['Population']*1000/crime_df['Area Size']

crime_df.sort_values(by = 'Density',ascending = False)

toronto_density_map = folium.Map(location=[latitude, longitude], zoom_start=11)


for lat, lng, neighborhood, dens, assault, autotheft, be, robbery in zip(crime_df['Latitude'], 
                                              crime_df['Longitude'], 
                                              crime_df['Neighborhood'],
                                              crime_df['Density'],
                                              crime_df['Assault Rate 2019'],
                                              crime_df['AutoTheft Rate 2019'],
                                              crime_df['BreakandEnter Rate 2019'],
                                              crime_df['Robbery Rate 2019'],
                                              ):
    label = '{}: \n Assault Rate:{},\n Autotheft Rate:{},\n BreakandEnter Rate:{},\n Robbery Rate:{} '.format(neighborhood, assault, autotheft, be, robbery)
    label = folium.Popup(label, parse_html=True, max_width = 150)
    folium.CircleMarker(
        [lat, lng],
        radius= dens,
        popup=label,
        color='black',
        fill=True,
        fill_color='grey',
        fill_opacity=0.7,
        parse_html=False).add_to(toronto_density_map)  


toronto_density_map



CLIENT_ID = 'G5XKCZADEOOQ35X1J1ZKAF2AMERGJ4EFZ5UVR3JBOGDW5MBA' 
CLIENT_SECRET = '0MQLW1J1ARWKHITZJOUQBU5FJY2D10CQYXTGIWQA0YH3RHSC'
VERSION = '20180605' # Foursquare API version
LIMIT = 100 # A default Foursquare API limit value

print('Your credentails:')
print('CLIENT_ID: ' + CLIENT_ID)
print('CLIENT_SECRET:' + CLIENT_SECRET)

def getNearbyVenues(names, latitudes, longitudes, radius=500):
    
    venues_list=[]
    for name, lat, lng in zip(names, latitudes, longitudes):
        print(name)
            
        # create the API request URL
        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(
            CLIENT_ID, 
            CLIENT_SECRET, 
            VERSION, 
            lat, 
            lng, 
            radius, 
            LIMIT)
            
        # make the GET request
        results = requests.get(url).json()["response"]['groups'][0]['items']
        
        # return only relevant information for each nearby venue
        venues_list.append([(
            name, 
            lat, 
            lng, 
            v['venue']['name'], 
            v['venue']['location']['lat'], 
            v['venue']['location']['lng'],  
            v['venue']['categories'][0]['name']) for v in results])

    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])
    nearby_venues.columns = ['Neighborhood', 
                  'Neighborhood Latitude', 
                  'Neighborhood Longitude', 
                  'Venue', 
                  'Venue Latitude', 
                  'Venue Longitude', 
                  'Venue Category']
    
    return(nearby_venues)

toronto_venues = getNearbyVenues(names = crime_df["Neighborhood"],
                                latitudes = crime_df['Latitude'],
                                longitudes = crime_df['Longitude'])

toronto_venues.head()

venues_grouped = toronto_venues.groupby("Neighborhood").count()[['Venue']]
print('In all neighborhoods belonging Toronto, there are {} venues entirely'.format(venues_grouped.shape[0]))

# one hot encoding
toronto_onehot = pd.get_dummies(toronto_venues[['Venue Category']], prefix="", prefix_sep="")
toronto_onehot["Neighborhood"] = toronto_venues['Neighborhood']
onehot_columns = ['Neighborhood']+list (toronto_onehot.columns.difference(['Neighborhood']))
toronto_onehot[onehot_columns]

toronto_grouped = toronto_onehot.groupby('Neighborhood').sum().reset_index()

toronto_onehot.shape

crime_venues = crime_df.merge(toronto_grouped, how = 'left', on = 'Neighborhood')
crime_venues.head()

crime_venues['Assault per cap'] = crime_df['Assault 2019']/crime_df['Population']
crime_venues['Autotheft per cap'] = crime_df['AutoTheft 2019']/crime_df['Population']
crime_venues['BreakandEnter per cap'] = crime_df['BreakandEnter 2019']/crime_df['Population']
crime_venues['Robbery per cap'] = crime_df['Robbery 2019']/crime_df['Population']
crime_venues.replace(np.nan, 0, inplace = True)
drop_list = list(crime_df.columns[:-1])
crime_venues.drop(crime_venues[drop_list],axis = 1,inplace = True)

crime_venues.head(10)

weight1 = np.ones((5,))
weight1
weight1 = weight1 / 5
weight2 = list(weight1) + [1]
weight3 = np.ones((347,))
weight3 = weight3 / 347

from sklearn.preprocessing import RobustScaler

X_norm = RobustScaler().fit_transform(crime_venues)
X_norm

distance = []
clusters =[]
for k in range(1,11):
  kmeans = KMeans(n_clusters = k, random_state = 0).fit(X_norm)
  clusters.append(k)
  distance.append(kmeans.inertia_)

kselect = pd.DataFrame({"Distance": distance,"k":clusters})
kselect
import matplotlib.pyplot as plt
plt.plot(kselect["k"],kselect["Distance"])
plt.title("Elbow Analysis")

kclusters = 7

cluster = KMeans(n_clusters = kclusters, random_state = 21).fit(X_norm)
print(cluster.labels_)

clabels = pd.DataFrame(cluster.labels_)

cluster_crime = crime_venues.copy()

a = pd.concat([cluster_crime,clabels], axis = "columns", sort = False)
a.rename(columns={0:"Labels"}, inplace = True)

add_list = list (crime_df.columns[:-1])
cluster_crime = pd.concat([a,crime_df[add_list]], axis = 'columns')   
cluster_crime.head()

cluster_crime.head(50)

cluster_crime['Labels'].value_counts()

# create map
map_clusters = folium.Map(location=[latitude, longitude], zoom_start=11)

# set color scheme for the clusters
x = np.arange(kclusters)
ys = [i + x + (i*x)**2 for i in range(kclusters)]
colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))
rainbow = [colors.rgb2hex(i) for i in colors_array]

# add markers to the map
markers_colors = []
for lat, lon, poi, cluster in zip(cluster_crime['Latitude'], 
                                  cluster_crime['Longitude'], 
                                  cluster_crime['Neighborhood'], 
                                  cluster_crime['Labels']):
    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)
    folium.CircleMarker(
        [lat, lon],
        radius=5,
        popup=label,
        color=rainbow[cluster-1],
        fill=True,
        fill_color=rainbow[cluster-1],
        fill_opacity=0.7).add_to(map_clusters)
       
map_clusters

c1 = cluster_crime['Labels'].value_counts().index[0]
row_filt = (cluster_crime['Labels'] == c1)
column_filt = ['Assault Rate 2019','AutoTheft Rate 2019','BreakandEnter Rate 2019','Robbery Rate 2019','Neighborhood']
cluster_crime_0 = cluster_crime.loc[row_filt,column_filt]

cluster0 = cluster_crime_0.melt(id_vars = 'Neighborhood',var_name = 'crime_type',value_name = 'rate')
cluster0.head()

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(15,10))
sns.boxplot( x=cluster0["crime_type"], y=cluster0['rate'], width =0.25, palette="Blues")
plt.xlabel('Crime Types',fontsize = 14)
plt.ylabel('Crime Rate',fontsize = 14)
plt.yticks(np.arange(0, max(cluster0['rate']),100),fontsize = 14)

plt.show()

c2 = cluster_crime['Labels'].value_counts().index[1]
row_filt = (cluster_crime['Labels'] == c2)
column_filt = ['Assault Rate 2019','AutoTheft Rate 2019','BreakandEnter Rate 2019','Robbery Rate 2019','Neighborhood']
cluster_crime_2 = cluster_crime.loc[row_filt,column_filt]
cluster2 = cluster_crime_2.melt(id_vars = 'Neighborhood',var_name = 'crime_type',value_name = 'rate')
cluster2.head()

plt.figure(figsize=(15,10))
width = 0.25
sns.boxplot( x=cluster2["crime_type"], y=cluster2['rate'], palette="Greens",width = 0.25)
plt.xlabel('Crime Types',fontsize = 14)
plt.ylabel('Crime Rate',fontsize = 14)
plt.xticks(fontsize = 14)
plt.yticks(np.arange(0, max(cluster2['rate']),100),fontsize = 14)

plt.show()

c3 = cluster_crime['Labels'].value_counts().index[2]
row_filt = (cluster_crime['Labels'] == c3)
column_filt = ['Assault Rate 2019','AutoTheft Rate 2019','BreakandEnter Rate 2019','Robbery Rate 2019','Neighborhood']
cluster_crime_3 = cluster_crime.loc[row_filt,column_filt]
cluster3 = cluster_crime_3.melt(id_vars = 'Neighborhood',var_name = 'crime_type',value_name = 'rate')
cluster3.head()

plt.figure(figsize=(15,10))
width = 0.25
sns.boxplot( x=cluster3["crime_type"], y=cluster3['rate'], palette="Reds",width = 0.25)
plt.xlabel('Crime Types',fontsize = 14)
plt.ylabel('Crime Rate',fontsize = 14)
plt.xticks(fontsize = 14)
plt.yticks(np.arange(0, max(cluster3['rate']),100),fontsize = 14)

plt.show()

aggc = cluster_crime['Labels'].value_counts().index[0:3]
row_filt = cluster_crime['Labels'].isin(aggc)
column_filt = ['Assault Rate 2019','AutoTheft Rate 2019','BreakandEnter Rate 2019','Robbery Rate 2019','Neighborhood','Labels']
three_clusters = cluster_crime.loc[row_filt,column_filt].sort_values(by='Labels', ascending = True)

three_clusters = three_clusters.melt(id_vars= ['Neighborhood','Labels'],var_name = 'crime_type',value_name = 'rate')
three_clusters.head()

three_clusters.dtypes

three_clusters['rate'] = three_clusters['rate'].astype('float')
plt.figure(figsize=(20,20))
sns.catplot( x = 'crime_type',
            y= 'rate',
            col ='Labels', 
            aspect = 2,
            kind = 'box',
            dodge = False,
            data = three_clusters)

plt.xticks(fontsize = 14)
plt.yticks(np.arange(0, max(three_clusters['rate'])+100,100),fontsize = 14)

plt.show()